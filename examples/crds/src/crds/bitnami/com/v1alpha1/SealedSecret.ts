import * as k8s from "@kubeframe/k8s";
import { NamespacedAPIResource } from "@kubeframe/k8s/base";

interface SealedSecretSpec {

    /**
     * Data is deprecated and will be removed eventually. Use per-value EncryptedData instead.
     */
    data?: string;

    encryptedData: {
      [k: string]: string;
    };

    /**
     * Template defines the structure of the Secret that will be
     * created from this sealed secret.
     */
    template?: {
      /**
       * Keys that should be templated using decrypted data.
       */
      data?: {
        [k: string]: string;
      };
      /**
       * Immutable, if set to true, ensures that data stored in the Secret cannot
       * be updated (only object metadata can be modified).
       * If not set to true, the field can be modified at any time.
       * Defaulted to nil.
       */
      immutable?: boolean;
      /**
       * Standard object's metadata.
       * More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
       */
      metadata?: {
        annotations?: {
          [k: string]: string;
        };
        finalizers?: string[];
        labels?: {
          [k: string]: string;
        };
        name?: string;
        namespace?: string;
      };
      /**
       * Used to facilitate programmatic handling of secret data.
       */
      type?: string;
    };
}

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * SealedSecret is the K8s representation of a "sealed Secret" - a
 * regular k8s Secret that has been sealed (encrypted) using the
 * controller's key.
 */
export interface SealedSecretArgs {
  metadata: k8s.meta.v1.NamespacedObjectMeta;
  /**
   * SealedSecretSpec is the specification of a SealedSecret.
   */
  spec: SealedSecretSpec;
  /**
   * SealedSecretStatus is the most recently observed status of the SealedSecret.
   */
  status?: {
    /**
     * Represents the latest available observations of a sealed secret's current state.
     */
    conditions?: {
      /**
       * Last time the condition transitioned from one status to another.
       */
      lastTransitionTime?: string;
      /**
       * The last time this condition was updated.
       */
      lastUpdateTime?: string;
      /**
       * A human readable message indicating details about the transition.
       */
      message?: string;
      /**
       * The reason for the condition's last transition.
       */
      reason?: string;
      /**
       * Status of the condition for a sealed secret.
       * Valid values for "Synced": "True", "False", or "Unknown".
       */
      status: string;
      /**
       * Type of condition for a sealed secret.
       * Valid value: "Synced"
       */
      type: string;
    }[];
    /**
     * ObservedGeneration reflects the generation most recently observed by the sealed-secrets controller.
     */
    observedGeneration?: number;
  };
}

export class SealedSecret extends NamespacedAPIResource {
    spec: SealedSecretSpec;
    status?: { conditions?: { lastTransitionTime?: string; lastUpdateTime?: string; message?: string; reason?: string; status: string; type: string; }[]; observedGeneration?: number; };

    constructor(args: SealedSecretArgs) {
        super('bitnami.com/v1alpha1', 'SealedSecret', args.metadata);
        this.spec = args.spec;
        this.status = args.status;
    }
}
